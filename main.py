import telebot
from telebot import types
import time
from sqlalchemy import create_engine, MetaData, Table, Integer, String, \
    Column, DateTime, ForeignKey, insert, select, update, or_, and_, BOOLEAN
import datetime as dt
from hashlib import sha256

# –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫

slov = {}
metadata = MetaData()

engine = create_engine("your adrees to bd")  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥

# –ù–∏–∂–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É

Workers = Table("Workers", metadata,
                Column('id', Integer(), primary_key=True),
                Column('languages', String(255), nullable=True),
                Column("other", String(255), nullable=True),
                Column("date", String(64), nullable=False,
                       default=dt.date.today().strftime('%Y-%m-%d %H:%M:%S')),
                Column("login", String(64), unique=True, nullable=False),
                Column("hash", String(256), nullable=False),
                )

Jobs = Table("jobs", metadata,
             Column("name", String(64), nullable=False),
             Column('id', Integer(), primary_key=True),
             Column("employer_id", Integer(), ForeignKey('Employers.id'), nullable=False),
             Column("finding", BOOLEAN(), nullable=False),
             Column("worker_id", Integer(), ForeignKey('Workers.id'), nullable=True),
             Column("other", String(255), nullable=True),
             Column("sum", Integer(), nullable=True),
             Column("date", String(64), nullable=False,
                    default=dt.date.today().strftime('%Y-%m-%d %H:%M:%S')),
             Column("finished", BOOLEAN(), nullable=False),
             Column("categories", String(50), nullable=True)
             )

Employers = Table("Employers", metadata,
                  Column("id", Integer(), primary_key=True),
                  Column("other", String(255), nullable=True),
                  Column("date", String(64), nullable=False,
                         default=dt.date.today().strftime('%Y-%m-%d %H:%M:%S')),
                  Column("hash", String(256), nullable=False),
                  Column("login", String(64), unique=True, nullable=False),
                  )

Feedback_workers = Table("Feedback_workers", metadata,
                         Column('id', Integer(), primary_key=True),
                         Column('worker_id', Integer(), ForeignKey('Workers.id'), nullable=False),
                         Column("other", String(255), nullable=False),
                         Column("pros", BOOLEAN(), nullable=False), )
Feedback_employers = Table("Feedback_employers", metadata,
                           Column('id', Integer(), primary_key=True),
                           Column('employer_id', Integer(), ForeignKey('Employers.id'),
                                  nullable=False),
                           Column("other", String(255), nullable=False),
                           Column("pros", BOOLEAN(), nullable=False), )
metadata.create_all(engine)

bot = telebot.TeleBot('bot')
admin = "id"

inline_btn_1 = types.InlineKeyboardButton('–ß—Ç–æ –∂–µ —ç—Ç–æ –∑–∞ –±–æ—Ç?', callback_data='button1')
inline_kb1 = types.InlineKeyboardMarkup().add(inline_btn_1)

inline_btn_1 = types.InlineKeyboardButton('–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?', callback_data='button2')
inline_btn_2 = types.InlineKeyboardButton('C—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏–º!', callback_data='button3')
inline_kb2 = types.InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)
keyboard1 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard1.row("–ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã")
keyboard1.row("–ü—Ä–æ—Ñ–∏–ª—å")

keyboard2 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard2.row("–ü—Ä–æ–≥—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–æ—Å—Ç–∞–≤–∫–∞")
keyboard2.row("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω")
keyboard2.row("–Ω–∞–∑–∞–¥")

keyboard3 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard3.row("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–û—Ç–º–µ–Ω–∞")

keyboard4 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard4.row("–†–∞–±–æ—á–∏–π", "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å")


@bot.message_handler(commands=['start'])
def process_command_1(message):
    w = str([message.text, message.from_user.id, message.from_user.first_name,
             message.from_user.last_name])
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Çüëã", reply_markup=inline_kb1)


@bot.callback_query_handler(func=lambda call: True)
def bottonconfig(call):
    if call.data == "button1":
        process_callback_button1(call)
    elif call.data == "button2":
        process_callback_button2(call)
    elif call.data == "button3":
        process_callback_button3(call)
    else:
        bot.send_message(call.from_user.id, f"@{str(call.data)}")
        bot.answer_callback_query(call.id)


def process_callback_button1(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id,
                     '–î–∞–Ω–Ω—ã–π –±–æ—Ç —ç—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ '
                     '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —É –¥—Ä—É–≥–∏—Ö —É—á–∞—Å–Ω–∏–∫–æ–≤', reply_markup=inline_kb2)


def process_callback_button2(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id,
                     "–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:\n\n–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã - –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ "
                     "–≤—ã–±–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Å—Ñ–µ—Ä–µ\n\n–ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ "
                     "–ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é",
                     reply_markup=keyboard1)


def process_callback_button3(callback_query):
    bot.answer_callback_query(callback_query.id)
    bot.send_message(callback_query.from_user.id,
                     '–ù—É –ø–æ–µ—Ö–∞–ª–∏!', reply_markup=keyboard1)


@bot.message_handler(content_types=['text'])
def work(message):
    if message.text == "–ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ":
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        bot.register_next_step_handler(message, sakas)
    elif message.text == "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã":
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã",
                         reply_markup=keyboard2)
    elif message.text == "–ü—Ä–æ–≥—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–∏–µ":
        conn = engine.connect()
        bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
        a = "–ü—Ä–æ–≥—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
        jobs_c = conn.execute(select(Jobs).where(Jobs.c.categories == a)).all()
        zapros = jobs_c
        for i in zapros:
            idtg = conn.execute(select(Employers).where(Employers.c.id == i[2])).first()
            inline_btn_10 = types.InlineKeyboardButton('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', callback_data=idtg[-1])
            inline_kb10 = types.InlineKeyboardMarkup().add(inline_btn_10)
            bot.send_message(message.from_user.id, i[0] + "\n\n" + i[5], reply_markup=inline_kb10)
    elif message.text == "–î–æ—Å—Ç–∞–≤–∫–∞":
        bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ—Å—Ç–∞–≤–æ–∫:")
        conn = engine.connect()
        a = "–î–æ—Å—Ç–∞–≤–∫–∞"
        jobs_c = conn.execute(select(Jobs).where(Jobs.c.categories == a)).all()
        zapros = jobs_c
        for i in zapros:
            idtg = conn.execute(select(Employers).where(Employers.c.id == i[2])).first()
            inline_btn_10 = types.InlineKeyboardButton('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', callback_data=idtg[-1])
            inline_kb10 = types.InlineKeyboardMarkup().add(inline_btn_10)
            bot.send_message(message.from_user.id, i[0] + "\n\n" + i[5], reply_markup=inline_kb10)
    elif message.text == "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        conn = engine.connect()
        a = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        jobs_c = conn.execute(select(Jobs).where(Jobs.c.categories == a)).all()
        zapros = jobs_c
        for i in zapros:
            print(i)
            idtg = conn.execute(select(Employers).where(Employers.c.id == i[2])).first()
            inline_btn_10 = types.InlineKeyboardButton('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', callback_data=idtg[-1])
            inline_kb10 = types.InlineKeyboardMarkup().add(inline_btn_10)
            bot.send_message(message.from_user.id, i[0] + "\n\n" + i[5], reply_markup=inline_kb10)
    elif message.text == "–î–∏–∑–∞–π–Ω":
        conn = engine.connect()
        a = "–î–∏–∑–∞–π–Ω"
        jobs_c = conn.execute(select(Jobs).where(Jobs.c.categories == a)).all()
        zapros = jobs_c
        for i in zapros:
            idtg = conn.execute(select(Employers).where(Employers.c.id == i[2])).first()
            inline_btn_10 = types.InlineKeyboardButton('–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', callback_data=idtg[-1])
            inline_kb10 = types.InlineKeyboardMarkup().add(inline_btn_10)
            bot.send_message(message.from_user.id, i[0] + "\n\n" + i[5], reply_markup=inline_kb10)
    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        conn = engine.connect()
        r = conn.execute(select([Workers]).where(
            Workers.c.login == message.from_user.username
        ))
        answer = r.first()
        r1 = conn.execute(select([Employers]).where(
            Employers.c.login == message.from_user.username
        ))
        answer1 = r1.first()
        # print(answer1, answer)
        if answer:
            keyboard10 = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard10.row("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–Ω–∞–∑–∞–¥")
            bot.send_message(message.from_user.id, str(answer[4]) + "\n\n" + str(answer[2]),
                             reply_markup=keyboard10)
        elif answer1:
            keyboard14 = telebot.types.ReplyKeyboardMarkup(True, True)
            keyboard14.row("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–Ω–∞–∑–∞–¥")
            bot.send_message(message.from_user.id, str(answer1[4]) + "\n\n" + str(answer1[1]),
                             reply_markup=keyboard14)
        else:
            bot.send_message(message.from_user.id, f"–í–∞—à –ª–æ–≥–∏–Ω: {message.from_user.username}")
            bot.send_message(message.from_user.id,
                             "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                             reply_markup=keyboard3)
    if message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=keyboard4)
        bot.register_next_step_handler(message, vibor)
    if message.text == "–û—Ç–º–µ–Ω–∞" or message.text == "–Ω–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard1)
    if message.text == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        redopis(message)


def vibor(message):
    if message.text == "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å":
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å")
        bot.register_next_step_handler(message, regrab)
    elif message.text == "–†–∞–±–æ—á–∏–π":
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å")
        bot.register_next_step_handler(message, reg)
    else:
        print(34)


def sakas(message):
    global slov
    slov[message.from_user.username] = str(message.text)
    # print(6789)
    conn = engine.connect()
    r = conn.execute(
        select(Employers).where(Employers.c.login == message.from_user.username)).first()
    # print(r)
    ins = insert(Jobs).values(employer_id=r[0],
                              name=str(message.text), finished=False, finding=True)
    conn.execute(ins)
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    bot.register_next_step_handler(message, opisanie)


def opisanie(message):
    conn = engine.connect()
    r = conn.execute(
        select(Employers).where(Employers.c.login == message.from_user.username)).first()
    # print(r[0])
    conn.execute(update(Jobs).where(Jobs.c.employer_id == r[0],
                                    Jobs.c.name == slov[message.from_user.username]).values(
        other=str(message.text)))
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö")
    bot.register_next_step_handler(message, rub)


def rub(message):
    conn = engine.connect()
    r = conn.execute(
        select(Employers).where(Employers.c.login == message.from_user.username)).first()
    r = conn.execute(update(Jobs).where(Jobs.c.employer_id == r[0],
                                        Jobs.c.name == slov[message.from_user.username]).values(
        sum=message.text))
    asd = telebot.types.ReplyKeyboardMarkup()
    asd.row("–ü—Ä–æ–≥—Ä–æ–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–æ—Å—Ç–∞–≤–∫–∞", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω")
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=asd)
    bot.register_next_step_handler(message, categori)


def categori(message):
    conn = engine.connect()
    r = conn.execute(
        select(Employers).where(Employers.c.login == message.from_user.username)).first()
    conn.execute(update(Jobs).where(Jobs.c.employer_id == r[0],
                                    Jobs.c.name == slov[message.from_user.username]).values(
        categories=str(message.text)))
    r1 = conn.execute(select([Jobs]).where(
        Jobs.c.employer_id == r[0]
    ))
    answer1 = r1.first()
    # print(answer1)
    if answer1:
        bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ", reply_markup=keyboard1)
    else:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=keyboard1)


def redopis(message):
    conn = engine.connect()
    r = conn.execute(select([Workers]).where(
        Workers.c.login == message.from_user.username
    ))
    answer = r.first()
    r1 = conn.execute(select([Employers]).where(
        Employers.c.login == message.from_user.username
    ))
    answer1 = r1.first()
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    if answer:
        bot.register_next_step_handler(message, opisan)
    elif answer1:
        bot.register_next_step_handler(message, opisanrab)


def reg(message):
    conn = engine.connect()
    ins = insert(Workers).values(login=str(message.from_user.username),
                                 hash=str(sha256(message.text.encode("UTF-8")).hexdigest()))
    r = conn.execute(ins)
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ—Ç–æ–º –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å")
    bot.register_next_step_handler(message, opisan)


def regrab(message):
    conn = engine.connect()
    ins = insert(Employers).values(login=str(message.from_user.username),
                                   hash=str(sha256(message.text.encode("UTF-8")).hexdigest()))
    r = conn.execute(ins)
    bot.send_message(message.from_user.id,
                     "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ—Ç–æ–º –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å")
    bot.register_next_step_handler(message, opisanrab)


def opisan(message):
    conn = engine.connect()
    r = conn.execute(update(Workers).where(Workers.c.login == message.from_user.username).values(
        other=str(message.text)))
    r = conn.execute(select(Workers).where(
        Workers.c.login == message.from_user.username
    ))
    answer = r.first()
    if answer:
        bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", reply_markup=keyboard1)
    else:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=keyboard1)


def opisanrab(message):
    conn = engine.connect()
    r = conn.execute(update(Employers).where(Employers.c.login == message.from_user.username).values(
        other=str(message.text)))
    r = conn.execute(select(Employers).where(
        Employers.c.login == message.from_user.username
    ))
    answer = r.first()
    if answer:
        bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", reply_markup=keyboard1)
    else:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", reply_markup=keyboard1)


while True:
    try:
        print("@frilansmsk_bot")
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        time.sleep(1)
        print(str(e))